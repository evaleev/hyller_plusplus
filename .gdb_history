up
up
p spin2
p o1
p o2
p sbs
p sbs.bf(0)
p sbs.bf(0).o1
p sbs.bf(0).o1[0]
p sbs.bf(0).o2[0]
down
p det
p det.o1
p det.o1[0]
p det.o2[0]
quit
run --max 2
break 'hyller::SDBasisSet::find(hyller::SD const&) const' 
run --max 2
list
b 43
delete 1
c
up
p det1
p det1.o1[0]
p det1.o2[0]
up
p spin2
p sbs
down
p sdbasis.bf(0)
p sdbasis.bf(0).o1[0]
p sdbasis.bf(0).o2[0]
p sdbasis.bf(1).o2[0]
p sdbasis.bf(2).o2[0]
p sdbasis.bf(3).o2[0]
shell
run
break 'hyller::CSFBasisSet::find(hyller::CSF const&) const' 
run --max 2
list
b 84
delete 3
c
up
up
list
down
p csf
p csf.d[0]
p csf.d[0][0]
quit
break 'hyller::CSFBasisSet::find(hyller::CSF const&) const' 
run --max 2
list
b 84
c
delete 1
c
up
p csf
p csf.d[0][0]
p csf.d[0][0].o1[0]
p csf.d[0][0].o2[0]
p csf.d[1][0].o1[0]
p csf.d[1][0].o2[0]
p csf.num_bf()
p cbf.num_bf()
p cbs.num_bf()
p cbs.bf(0)
p cbs.bf(1)
p cbs.bf(2)
p cbs.bf(3)
p cbs.bf(4)
p cbs.bf(5)
p cbs.bf(6)
p cbs.bf(1).d[0][0].o1[0]
run
runup
up
p cbs.bf(1).d[0][0].o1[0]
p cbs.bf(1).d[0][0].o2[0]
p cbs.bf(3).d[0][0].o2[0]
p cbs.bf(3).d[0][0].o1[0]
shell
run
shell
run
delete 2
c
quit
run
run --max 2
break __cxa_allocate_exception
c
c
c
run --max 2
up
up
up
quit
break __cxa_allocate_exception
run --max 2
up
up
up
up
up
down
p bf
shell
run
up
up
c
up
p I
p I
p J
shell
run
c
disable 1
c
shell
run
shell
quit
break solvHF
break main
run --hyller 10
n
n
run --max 10
list
b 528
c
n
n
n
p nbf
n
list
b 650
c
p E
n
p E
n
p iter
n
p dEscf 
quit
quit
break 'hyller::sq_inverse(double**, int)' 
run -- max 4
run --max 4
n
n
n
n
n
p eval[dim]
p eval[dim]@4
p dim
p eval[dim]@22
p Matrix[0]
p Matrix[0][0]
p Matrix[0][1]
p Matrix[0][2]
p Matrix[0][3]
p Matrix[0][4]
quit
break 'hyller::sq_inverse(double**, int)' 
break 'hyller::sq_sqrt(double**, double***, int)' 
run --max 2
c
c
n
n
n
np eval[0]
p eval[0]
p eval[0]@dim
p dim
c
quit
break 'hyller::sq_inverse(double**, int)' 
ruin --max 2
run --max 2
n
p eval[i]
p eval[dim]
p eval[6]
quit
quit
break'hyller::sq_inverse(double**, int)' 
run --max 2
up
c
up
down
n
n
n
n
n
n
n
n
p dim
p eval[0]@7
n
n
n
n
n
n
n
n
n
n
n
n
n
n
quit
break 'hyller::sq_inverse(double**, int)' 
run --max 2
c
n
n
p eval[0]@7
n
n
p rank
n
n
p rank
n
n
n
n
quit
run --max 2
up
up
quit
qui
run --max 10
up
p nhyll
p rhyll
quit
